upstream unicorn {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).

  # for UNIX domain socket setups:
  server unix:/usr/apps/social/current/tmp/sockets/unicorn.sock fail_timeout=0;
  
  # for TCP setups, point these to your backend servers
  # server 192.168.0.7:8080 fail_timeout=0;
  # server 192.168.0.8:8080 fail_timeout=0;
  # server 192.168.0.9:8080 fail_timeout=0;
}

server {
  listen      80;
  server_name *.socialintrigue.com;

  keepalive_timeout 5;

  # path for static files
  root /usr/apps/social/current/public;
  
  location / {
    # an HTTP header important enough to have its own Wikipedia entry:
    #   http://en.wikipedia.org/wiki/X-Forwarded-For
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    # enable this if and only if you use HTTPS, this helps Rack
    # set the proper protocol for doing redirects:
    # proxy_set_header X-Forwarded-Proto https;

    # pass the Host: header from the client right along so redirects
    # can be set properly within the Rack application
    proxy_set_header Host $http_host;

    # we don't want nginx trying to do something clever with
    # redirects, we set the Host: header above already.
    proxy_redirect off;

    # set "proxy_buffering off" *only* for Rainbows! when doing
    # Comet/long-poll stuff.  It's also safe to set if you're
    # using only serving fast clients with Unicorn + nginx.
    # Otherwise you _want_ nginx to buffer responses to slow
    # clients, really.
    # proxy_buffering off;

    # Try to serve static files from nginx, no point in making an
    # *application* server like Unicorn/Rainbows! serve static files.
    if (!-f $request_filename) {
      proxy_pass http://unicorn;
      break;
    }
  }
  
  location ~* \.(ico|css|js|gif|jp?g|png)(\?[0-9]+)?$ {
    expires max;
    break;
  }

  # This rewrites all the requests to the maintenance.html page if it exists in the doc root.
  # This is for capistrano's disable web task.
  error_page   500 502 504  /500.html;
  error_page   503 @503;
  location @503 {
    rewrite  ^(.*)$  /system/maintenance.html break;
  }

  if (-f $document_root/system/maintenance.html) {
    return 503;
  }
  
}